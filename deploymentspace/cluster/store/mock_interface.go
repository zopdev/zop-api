// Code generated by MockGen. DO NOT EDIT.
// Source: interface.go

// Package store is a generated GoMock package.
package store

import (
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
	
	gofr "gofr.dev/pkg/gofr"
)

// MockClusterStore is a mock of ClusterStore interface.
type MockClusterStore struct {
	ctrl     *gomock.Controller
	recorder *MockClusterStoreMockRecorder
}

// MockClusterStoreMockRecorder is the mock recorder for MockClusterStore.
type MockClusterStoreMockRecorder struct {
	mock *MockClusterStore
}

// NewMockClusterStore creates a new mock instance.
func NewMockClusterStore(ctrl *gomock.Controller) *MockClusterStore {
	mock := &MockClusterStore{ctrl: ctrl}
	mock.recorder = &MockClusterStoreMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockClusterStore) EXPECT() *MockClusterStoreMockRecorder {
	return m.recorder
}

// GetByCluster mocks base method.
func (m *MockClusterStore) GetByCluster(ctx *gofr.Context, cluster *Cluster) (*Cluster, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByCluster", ctx, cluster)
	ret0, _ := ret[0].(*Cluster)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByCluster indicates an expected call of GetByCluster.
func (mr *MockClusterStoreMockRecorder) GetByCluster(ctx, cluster interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByCluster", reflect.TypeOf((*MockClusterStore)(nil).GetByCluster), ctx, cluster)
}

// GetByDeploymentSpaceID mocks base method.
func (m *MockClusterStore) GetByDeploymentSpaceID(ctx *gofr.Context, deploymentSpaceID int) (*Cluster, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByDeploymentSpaceID", ctx, deploymentSpaceID)
	ret0, _ := ret[0].(*Cluster)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByDeploymentSpaceID indicates an expected call of GetByDeploymentSpaceID.
func (mr *MockClusterStoreMockRecorder) GetByDeploymentSpaceID(ctx, deploymentSpaceID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByDeploymentSpaceID", reflect.TypeOf((*MockClusterStore)(nil).GetByDeploymentSpaceID), ctx, deploymentSpaceID)
}

// Insert mocks base method.
func (m *MockClusterStore) Insert(ctx *gofr.Context, cluster *Cluster) (*Cluster, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Insert", ctx, cluster)
	ret0, _ := ret[0].(*Cluster)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Insert indicates an expected call of Insert.
func (mr *MockClusterStoreMockRecorder) Insert(ctx, cluster interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Insert", reflect.TypeOf((*MockClusterStore)(nil).Insert), ctx, cluster)
}
