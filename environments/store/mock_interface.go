// Code generated by MockGen. DO NOT EDIT.
// Source: interface.go

// Package store is a generated GoMock package.
package store

import (
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
	gofr "gofr.dev/pkg/gofr"
)

// MockEnvironmentStore is a mock of EnvironmentStore interface.
type MockEnvironmentStore struct {
	ctrl     *gomock.Controller
	recorder *MockEnvironmentStoreMockRecorder
}

// MockEnvironmentStoreMockRecorder is the mock recorder for MockEnvironmentStore.
type MockEnvironmentStoreMockRecorder struct {
	mock *MockEnvironmentStore
}

// NewMockEnvironmentStore creates a new mock instance.
func NewMockEnvironmentStore(ctrl *gomock.Controller) *MockEnvironmentStore {
	mock := &MockEnvironmentStore{ctrl: ctrl}
	mock.recorder = &MockEnvironmentStoreMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockEnvironmentStore) EXPECT() *MockEnvironmentStoreMockRecorder {
	return m.recorder
}

// GetALL mocks base method.
func (m *MockEnvironmentStore) GetALL(ctx *gofr.Context, applicationID int) ([]Environment, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetALL", ctx, applicationID)
	ret0, _ := ret[0].([]Environment)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetALL indicates an expected call of GetALL.
func (mr *MockEnvironmentStoreMockRecorder) GetALL(ctx, applicationID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetALL", reflect.TypeOf((*MockEnvironmentStore)(nil).GetALL), ctx, applicationID)
}

// GetByName mocks base method.
func (m *MockEnvironmentStore) GetByName(ctx *gofr.Context, applicationID int, name string) (*Environment, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByName", ctx, applicationID, name)
	ret0, _ := ret[0].(*Environment)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByName indicates an expected call of GetByName.
func (mr *MockEnvironmentStoreMockRecorder) GetByName(ctx, applicationID, name interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByName", reflect.TypeOf((*MockEnvironmentStore)(nil).GetByName), ctx, applicationID, name)
}

// Insert mocks base method.
func (m *MockEnvironmentStore) Insert(ctx *gofr.Context, environment *Environment) (*Environment, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Insert", ctx, environment)
	ret0, _ := ret[0].(*Environment)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Insert indicates an expected call of Insert.
func (mr *MockEnvironmentStoreMockRecorder) Insert(ctx, environment interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Insert", reflect.TypeOf((*MockEnvironmentStore)(nil).Insert), ctx, environment)
}

// Update mocks base method.
func (m *MockEnvironmentStore) Update(ctx *gofr.Context, environment *Environment) (*Environment, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", ctx, environment)
	ret0, _ := ret[0].(*Environment)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Update indicates an expected call of Update.
func (mr *MockEnvironmentStoreMockRecorder) Update(ctx, environment interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockEnvironmentStore)(nil).Update), ctx, environment)
}
