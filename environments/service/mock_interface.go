// Code generated by MockGen. DO NOT EDIT.
// Source: interface.go

// Package service is a generated GoMock package.
package service

import (
	reflect "reflect"

	store "github.com/zopdev/zop-api/environments/store"
	gomock "go.uber.org/mock/gomock"
	gofr "gofr.dev/pkg/gofr"
)

// MockEnvironmentService is a mock of EnvironmentService interface.
type MockEnvironmentService struct {
	ctrl     *gomock.Controller
	recorder *MockEnvironmentServiceMockRecorder
}

// MockEnvironmentServiceMockRecorder is the mock recorder for MockEnvironmentService.
type MockEnvironmentServiceMockRecorder struct {
	mock *MockEnvironmentService
}

// NewMockEnvironmentService creates a new mock instance.
func NewMockEnvironmentService(ctrl *gomock.Controller) *MockEnvironmentService {
	mock := &MockEnvironmentService{ctrl: ctrl}
	mock.recorder = &MockEnvironmentServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockEnvironmentService) EXPECT() *MockEnvironmentServiceMockRecorder {
	return m.recorder
}

// Add mocks base method.
func (m *MockEnvironmentService) Add(ctx *gofr.Context, environment *store.Environment) (*store.Environment, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Add", ctx, environment)
	ret0, _ := ret[0].(*store.Environment)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Add indicates an expected call of Add.
func (mr *MockEnvironmentServiceMockRecorder) Add(ctx, environment interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Add", reflect.TypeOf((*MockEnvironmentService)(nil).Add), ctx, environment)
}

// FetchAll mocks base method.
func (m *MockEnvironmentService) FetchAll(ctx *gofr.Context, applicationID int) ([]store.Environment, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FetchAll", ctx, applicationID)
	ret0, _ := ret[0].([]store.Environment)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FetchAll indicates an expected call of FetchAll.
func (mr *MockEnvironmentServiceMockRecorder) FetchAll(ctx, applicationID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FetchAll", reflect.TypeOf((*MockEnvironmentService)(nil).FetchAll), ctx, applicationID)
}

// Update mocks base method.
func (m *MockEnvironmentService) Update(ctx *gofr.Context, environments []store.Environment) ([]store.Environment, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", ctx, environments)
	ret0, _ := ret[0].([]store.Environment)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Update indicates an expected call of Update.
func (mr *MockEnvironmentServiceMockRecorder) Update(ctx, environments interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockEnvironmentService)(nil).Update), ctx, environments)
}
