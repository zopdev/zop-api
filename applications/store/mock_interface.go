// Code generated by MockGen. DO NOT EDIT.
// Source: interface.go

// Package store is a generated GoMock package.
package store

import (
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
	gofr "gofr.dev/pkg/gofr"
)

// MockApplicationStore is a mock of ApplicationStore interface.
type MockApplicationStore struct {
	ctrl     *gomock.Controller
	recorder *MockApplicationStoreMockRecorder
}

// MockApplicationStoreMockRecorder is the mock recorder for MockApplicationStore.
type MockApplicationStoreMockRecorder struct {
	mock *MockApplicationStore
}

// NewMockApplicationStore creates a new mock instance.
func NewMockApplicationStore(ctrl *gomock.Controller) *MockApplicationStore {
	mock := &MockApplicationStore{ctrl: ctrl}
	mock.recorder = &MockApplicationStoreMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockApplicationStore) EXPECT() *MockApplicationStoreMockRecorder {
	return m.recorder
}

// GetALLApplications mocks base method.
func (m *MockApplicationStore) GetALLApplications(ctx *gofr.Context) ([]Application, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetALLApplications", ctx)
	ret0, _ := ret[0].([]Application)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetALLApplications indicates an expected call of GetALLApplications.
func (mr *MockApplicationStoreMockRecorder) GetALLApplications(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetALLApplications", reflect.TypeOf((*MockApplicationStore)(nil).GetALLApplications), ctx)
}

// GetApplicationByID mocks base method.
func (m *MockApplicationStore) GetApplicationByID(ctx *gofr.Context, id int) (*Application, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetApplicationByID", ctx, id)
	ret0, _ := ret[0].(*Application)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetApplicationByID indicates an expected call of GetApplicationByID.
func (mr *MockApplicationStoreMockRecorder) GetApplicationByID(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetApplicationByID", reflect.TypeOf((*MockApplicationStore)(nil).GetApplicationByID), ctx, id)
}

// GetApplicationByName mocks base method.
func (m *MockApplicationStore) GetApplicationByName(ctx *gofr.Context, name string) (*Application, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetApplicationByName", ctx, name)
	ret0, _ := ret[0].(*Application)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetApplicationByName indicates an expected call of GetApplicationByName.
func (mr *MockApplicationStoreMockRecorder) GetApplicationByName(ctx, name interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetApplicationByName", reflect.TypeOf((*MockApplicationStore)(nil).GetApplicationByName), ctx, name)
}

// InsertApplication mocks base method.
func (m *MockApplicationStore) InsertApplication(ctx *gofr.Context, application *Application) (*Application, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InsertApplication", ctx, application)
	ret0, _ := ret[0].(*Application)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// InsertApplication indicates an expected call of InsertApplication.
func (mr *MockApplicationStoreMockRecorder) InsertApplication(ctx, application interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InsertApplication", reflect.TypeOf((*MockApplicationStore)(nil).InsertApplication), ctx, application)
}

// InsertEnvironment mocks base method.
func (m *MockApplicationStore) InsertEnvironment(ctx *gofr.Context, environment *Environment) (*Environment, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InsertEnvironment", ctx, environment)
	ret0, _ := ret[0].(*Environment)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// InsertEnvironment indicates an expected call of InsertEnvironment.
func (mr *MockApplicationStoreMockRecorder) InsertEnvironment(ctx, environment interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InsertEnvironment", reflect.TypeOf((*MockApplicationStore)(nil).InsertEnvironment), ctx, environment)
}
