// Code generated by MockGen. DO NOT EDIT.
// Source: interface.go

// Package provider is a generated GoMock package.
package provider

import (
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
	gofr "gofr.dev/pkg/gofr"
)

// MockProvider is a mock of Provider interface.
type MockProvider struct {
	ctrl     *gomock.Controller
	recorder *MockProviderMockRecorder
}

// MockProviderMockRecorder is the mock recorder for MockProvider.
type MockProviderMockRecorder struct {
	mock *MockProvider
}

// NewMockProvider creates a new mock instance.
func NewMockProvider(ctrl *gomock.Controller) *MockProvider {
	mock := &MockProvider{ctrl: ctrl}
	mock.recorder = &MockProviderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockProvider) EXPECT() *MockProviderMockRecorder {
	return m.recorder
}

// GetCronJob mocks base method.
func (m *MockProvider) GetCronJob(ctx *gofr.Context, cluster *Cluster, cloudAcc *CloudAccount, creds any, namespace, name string) (any, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCronJob", ctx, cluster, cloudAcc, creds, namespace, name)
	ret0, _ := ret[0].(any)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCronJob indicates an expected call of GetCronJob.
func (mr *MockProviderMockRecorder) GetCronJob(ctx, cluster, cloudAcc, creds, namespace, name interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCronJob", reflect.TypeOf((*MockProvider)(nil).GetCronJob), ctx, cluster, cloudAcc, creds, namespace, name)
}

// GetDeployment mocks base method.
func (m *MockProvider) GetDeployment(ctx *gofr.Context, cluster *Cluster, cloudAccount *CloudAccount, credentials interface{}, namespace, name string) (interface{}, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDeployment", ctx, cluster, cloudAccount, credentials, namespace, name)
	ret0, _ := ret[0].(interface{})
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetDeployment indicates an expected call of GetDeployment.
func (mr *MockProviderMockRecorder) GetDeployment(ctx, cluster, cloudAccount, credentials, namespace, name interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDeployment", reflect.TypeOf((*MockProvider)(nil).GetDeployment), ctx, cluster, cloudAccount, credentials, namespace, name)
}

// GetPod mocks base method.
func (m *MockProvider) GetPod(ctx *gofr.Context, cluster *Cluster, cloudAccount *CloudAccount, credentials interface{}, namespace, name string) (interface{}, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPod", ctx, cluster, cloudAccount, credentials, namespace, name)
	ret0, _ := ret[0].(interface{})
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPod indicates an expected call of GetPod.
func (mr *MockProviderMockRecorder) GetPod(ctx, cluster, cloudAccount, credentials, namespace, name interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPod", reflect.TypeOf((*MockProvider)(nil).GetPod), ctx, cluster, cloudAccount, credentials, namespace, name)
}

// GetService mocks base method.
func (m *MockProvider) GetService(ctx *gofr.Context, cluster *Cluster, cloudAccount *CloudAccount, credentials interface{}, namespace, name string) (interface{}, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetService", ctx, cluster, cloudAccount, credentials, namespace, name)
	ret0, _ := ret[0].(interface{})
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetService indicates an expected call of GetService.
func (mr *MockProviderMockRecorder) GetService(ctx, cluster, cloudAccount, credentials, namespace, name interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetService", reflect.TypeOf((*MockProvider)(nil).GetService), ctx, cluster, cloudAccount, credentials, namespace, name)
}

// ListAllClusters mocks base method.
func (m *MockProvider) ListAllClusters(ctx *gofr.Context, cloudAccount *CloudAccount, credentials interface{}) (*ClusterResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListAllClusters", ctx, cloudAccount, credentials)
	ret0, _ := ret[0].(*ClusterResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListAllClusters indicates an expected call of ListAllClusters.
func (mr *MockProviderMockRecorder) ListAllClusters(ctx, cloudAccount, credentials interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListAllClusters", reflect.TypeOf((*MockProvider)(nil).ListAllClusters), ctx, cloudAccount, credentials)
}

// ListCronJobs mocks base method.
func (m *MockProvider) ListCronJobs(ctx *gofr.Context, cluster *Cluster, cloudAccount *CloudAccount, credentials interface{}, namespace string) (interface{}, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListCronJobs", ctx, cluster, cloudAccount, credentials, namespace)
	ret0, _ := ret[0].(interface{})
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListCronJobs indicates an expected call of ListCronJobs.
func (mr *MockProviderMockRecorder) ListCronJobs(ctx, cluster, cloudAccount, credentials, namespace interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListCronJobs", reflect.TypeOf((*MockProvider)(nil).ListCronJobs), ctx, cluster, cloudAccount, credentials, namespace)
}

// ListDeployments mocks base method.
func (m *MockProvider) ListDeployments(ctx *gofr.Context, cluster *Cluster, cloudAccount *CloudAccount, credentials interface{}, namespace string) (interface{}, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListDeployments", ctx, cluster, cloudAccount, credentials, namespace)
	ret0, _ := ret[0].(interface{})
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListDeployments indicates an expected call of ListDeployments.
func (mr *MockProviderMockRecorder) ListDeployments(ctx, cluster, cloudAccount, credentials, namespace interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListDeployments", reflect.TypeOf((*MockProvider)(nil).ListDeployments), ctx, cluster, cloudAccount, credentials, namespace)
}

// ListNamespace mocks base method.
func (m *MockProvider) ListNamespace(ctx *gofr.Context, cluster *Cluster, cloudAccount *CloudAccount, credentials interface{}) (interface{}, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListNamespace", ctx, cluster, cloudAccount, credentials)
	ret0, _ := ret[0].(interface{})
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListNamespace indicates an expected call of ListNamespace.
func (mr *MockProviderMockRecorder) ListNamespace(ctx, cluster, cloudAccount, credentials interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListNamespace", reflect.TypeOf((*MockProvider)(nil).ListNamespace), ctx, cluster, cloudAccount, credentials)
}

// ListPods mocks base method.
func (m *MockProvider) ListPods(ctx *gofr.Context, cluster *Cluster, cloudAccount *CloudAccount, credentials interface{}, namespace string) (interface{}, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListPods", ctx, cluster, cloudAccount, credentials, namespace)
	ret0, _ := ret[0].(interface{})
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListPods indicates an expected call of ListPods.
func (mr *MockProviderMockRecorder) ListPods(ctx, cluster, cloudAccount, credentials, namespace interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListPods", reflect.TypeOf((*MockProvider)(nil).ListPods), ctx, cluster, cloudAccount, credentials, namespace)
}

// ListServices mocks base method.
func (m *MockProvider) ListServices(ctx *gofr.Context, cluster *Cluster, cloudAccount *CloudAccount, credentials interface{}, namespace string) (interface{}, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListServices", ctx, cluster, cloudAccount, credentials, namespace)
	ret0, _ := ret[0].(interface{})
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListServices indicates an expected call of ListServices.
func (mr *MockProviderMockRecorder) ListServices(ctx, cluster, cloudAccount, credentials, namespace interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListServices", reflect.TypeOf((*MockProvider)(nil).ListServices), ctx, cluster, cloudAccount, credentials, namespace)
}
