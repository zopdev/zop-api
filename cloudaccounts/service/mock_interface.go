// Code generated by MockGen. DO NOT EDIT.
// Source: interface.go

// Package service is a generated GoMock package.
package service

import (
	reflect "reflect"

	store "github.com/zopdev/zop-api/cloudaccounts/store"

	gomock "go.uber.org/mock/gomock"
	gofr "gofr.dev/pkg/gofr"
)

// MockCloudAccountService is a mock of CloudAccountService interface.
type MockCloudAccountService struct {
	ctrl     *gomock.Controller
	recorder *MockCloudAccountServiceMockRecorder
}

// MockCloudAccountServiceMockRecorder is the mock recorder for MockCloudAccountService.
type MockCloudAccountServiceMockRecorder struct {
	mock *MockCloudAccountService
}

// NewMockCloudAccountService creates a new mock instance.
func NewMockCloudAccountService(ctrl *gomock.Controller) *MockCloudAccountService {
	mock := &MockCloudAccountService{ctrl: ctrl}
	mock.recorder = &MockCloudAccountServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCloudAccountService) EXPECT() *MockCloudAccountServiceMockRecorder {
	return m.recorder
}

// AddCloudAccount mocks base method.
func (m *MockCloudAccountService) AddCloudAccount(ctx *gofr.Context, accounts *store.CloudAccount) (*store.CloudAccount, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddCloudAccount", ctx, accounts)
	ret0, _ := ret[0].(*store.CloudAccount)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AddCloudAccount indicates an expected call of AddCloudAccount.
func (mr *MockCloudAccountServiceMockRecorder) AddCloudAccount(ctx, accounts interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddCloudAccount", reflect.TypeOf((*MockCloudAccountService)(nil).AddCloudAccount), ctx, accounts)
}

// FetchAllCloudAccounts mocks base method.
func (m *MockCloudAccountService) FetchAllCloudAccounts(ctx *gofr.Context) ([]store.CloudAccount, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FetchAllCloudAccounts", ctx)
	ret0, _ := ret[0].([]store.CloudAccount)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FetchAllCloudAccounts indicates an expected call of FetchAllCloudAccounts.
func (mr *MockCloudAccountServiceMockRecorder) FetchAllCloudAccounts(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FetchAllCloudAccounts", reflect.TypeOf((*MockCloudAccountService)(nil).FetchAllCloudAccounts), ctx)
}

// FetchDeploymentSpace mocks base method.
func (m *MockCloudAccountService) FetchDeploymentSpace(ctx *gofr.Context, cloudAccountID int) (interface{}, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Fetch", ctx, cloudAccountID)
	ret0, _ := ret[0].(interface{})
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FetchDeploymentSpace indicates an expected call of FetchDeploymentSpace.
func (mr *MockCloudAccountServiceMockRecorder) FetchDeploymentSpace(ctx, cloudAccountID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Fetch", reflect.TypeOf((*MockCloudAccountService)(nil).FetchDeploymentSpace), ctx, cloudAccountID)
}

// FetchDeploymentSpaceOptions mocks base method.
func (m *MockCloudAccountService) FetchDeploymentSpaceOptions(ctx *gofr.Context, id int) ([]DeploymentSpaceOptions, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FetchDeploymentSpaceOptions", ctx, id)
	ret0, _ := ret[0].([]DeploymentSpaceOptions)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FetchDeploymentSpaceOptions indicates an expected call of FetchDeploymentSpaceOptions.
func (mr *MockCloudAccountServiceMockRecorder) FetchDeploymentSpaceOptions(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FetchDeploymentSpaceOptions", reflect.TypeOf((*MockCloudAccountService)(nil).FetchDeploymentSpaceOptions), ctx, id)
}

// ListNamespaces mocks base method.
func (m *MockCloudAccountService) ListNamespaces(ctx *gofr.Context, id int, clusterName, clusterRegion string) (interface{}, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListNamespaces", ctx, id, clusterName, clusterRegion)
	ret0, _ := ret[0].(interface{})
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListNamespaces indicates an expected call of ListNamespaces.
func (mr *MockCloudAccountServiceMockRecorder) ListNamespaces(ctx, id, clusterName, clusterRegion interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListNamespaces", reflect.TypeOf((*MockCloudAccountService)(nil).ListNamespaces), ctx, id, clusterName, clusterRegion)
}
